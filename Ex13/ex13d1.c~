/*
最近の書籍には13桁からなるISBN番号が振られていて(以前は10桁だった）
この番号をもとに書籍を特定することができる。
したがって、番号さえ知っていれば、その書籍の注文や検索も簡単に行なうことができる。
このISBN番号は次のような書式になっている。 
978-4-274-06440-1 
(ただし、区切り方は若干違う場合がある) 
この番号の最後の桁（１３桁目）の数字は、それまでの１２桁の数字に誤りが無く
正しいISBN番号になっていることを示す符号（チェックディジットと呼ぶ）に
なっている。このチェックディジットは以下のように計算される。 
まず、偶数桁の数字は3倍し、奇数桁の数字は１倍して、それらの合計値を求める。 
{(1つめの数字×1)＋(2つめの数字×3)＋(3つめの数字×1)＋(4つめの数字×3)＋…} 
この合計値の下1桁の数字を10から引いたものがチェックディジットとなる。
例えば、合計が134であれば、チェックディジットは 
10 - 4 = 6 
で6となる。なお、合計値の下１桁が0の場合は、チェックディジットは0とする。
もし、あるISBN番号について最初の12桁から求めた チェックディジットと、
13桁目の数字が一致しない場合は、何らかの誤りを含んだ不正なISBN番号である
ということになる。 
この計算方法を利用して、入力されたISBN番号が正しいことを確かめるプログ
ラムを作ってみよう。
作成するプログラムの仕様は以下のとおりである。 
ISBN番号は「-」にかかわらず上位桁から４つずつ入力し、最後の13桁目の数字は
1つだけ入力する。これらの入力部分も関数で作成する(4つ入力する関数と1つ入力
する関数は別々でよい)。戻り値は入力された数字とする。 
入力された際、5桁以上の数字や、マイナスの数字(すなわち、4桁の正の整数となり
えないもの)が入力された場合には、「入力された数字が不正です」として、プログ
ラムを終了する。このエラーチェックも上述の入力を行う関数の中で行う。 
4つごとに入力された数字について、上記の合計を計算する関数を作成する。この関
数は引数として入力された数字をとり、戻り値として合計(1つめの数字×1＋2つめの数字×3＋…)を返す。} 
4つごとの数字3つのブロックで合計を計算し、最後にチェックディジットを計算する。 
チェックディジットが合っていれば「正しいISBN番号です」、間違っていれば「不正
なISBN番号です」と表示する。 
関数はこの他にも適宜付け加えてよい。 
% ./a.out
ISBNの最初の4桁を入力してください: 9784
ISBNの2つめの4桁を入力してください: 4040
ISBNの3つめの4桁を入力してください: 4167
ISBNの最後の数字を入力してください: 8
正しいISBN番号です
% ./a.out
ISBNの最初の4桁を入力してください: 9784
ISBNの2つめの4桁を入力してください: 6203
ISBNの3つめの4桁を入力してください: 2025
ISBNの最後の数字を入力してください: 0 
正しいISBN番号です
% ./a.out
ISBNの最初の4桁を入力してください: 9780 
ISBNの2つめの4桁を入力してください: 0666
ISBNの3つめの4桁を入力してください: 2073
ISBNの最後の数字を入力してください: 2
正しいISBN番号です
% ./a.out
ISBNの最初の4桁を入力してください: 9784
ISBNの2つめの4桁を入力してください: 1234
ISBNの3つめの4桁を入力してください: 5678
ISBNの最後の数字を入力してください: 9 
不正なISBN番号です
% ./a.out
ISBNの最初の4桁を入力してください: 97841 
入力された数字が不正です
*/

#include <stdio.h>
#include <stdlib.h>

int number(int);//3番目までの桁の入力を行う
int lastnum();//最後の一桁の入力を行う
int ketasum(int);//入力された値の倍数合計をだす。


int main(void){
	int n[3];//3つの桁を格納
	int last;//最後の数字を格納
	int i;//カウンタ
	int sum=0;//合計
	void check(int,int);
	
	for(i=0; i<3; i++){
		n[i] = number(i);
		//printf("%d\n",n[i]);//デバッグ用
		sum += ketasum(n[i]);
		printf("%d個目までの合計は%dです。\n",i+1,sum);
	}
	last = lastnum();//最後の一桁を関数で入力させてlastへ代入
	
	
	/*入力したISBNの表示*/
	printf("入力したISBNは %d-%d-%d-%d です。\n",n[0],n[1],n[2],last);
	
	check(sum,last);
	
	return 0;
}

/*-----３つ目の桁までの数値の入力-----*/
int number(int i){
	int n;
	
	printf("ISBNの%dつ目のハイフンで区切られている数値を入力してください。",i+1);
	scanf("%d",&n);
	
	if(n < 0 || 9999 < n){//入力値が範囲内かの判定
		printf("不正なISBNが入力されました。\n");
		exit(8);
	}
	
	return n;//入力値をn[i]へ返す
}

/*-----最後の一桁の入力-----*/
int lastnum(){
	int n;
	
	printf("ISBNの4つ目のハイフンで区切られている数値を入力してください。");
	scanf("%d",&n);
	
	if(n < 0 || 9 < n){
		printf("不正なISBNが入力されました。\n");
		exit(8);
	}
	
	return n;
}

int ketasum(int n){
	int sum=0,amari,w=10,w2;
	int keta[4];//4桁数字を一桁ごとに格納
	int i;//カウンタ
	
	for(i=0; i<4; i++){
		amari = n%w;//求めたい桁数以下の数字を抽出
		w2=w;
		keta[i] = amari/(w2/10);//抽出した値から求めたい数値を抽出
		w *= 10;
		
		if(i == 0 || i == 2){//偶数桁は３倍
			keta[i] = keta[i]*3;
		}
		//printf("%d\n",keta[i]);
		
		sum += keta[i];//合計の算出
	}
	
	return sum;
}

void check(int sum, int last){
	int amari;
	
	amari = sum&10;
	amari = 10-amari;
	
	//printf("%d\n",amari);
	
	if(amari == last){
		printf("チェックディジットは%dであり\n",amari);
		printf("(ISBNの末尾)%d = (チェックディジット)%d　であるので。\n",last,amari);
		printf("正しいISBN番号です。\n");
	}else{
		printf("チェックディジットは%dであり\n",amari);
		printf("(ISBNの末尾)%d ≠ (チェックディジット)%d　であるので。\n",last,amari);
		printf("不正なISBN番号です。\n");
	}
}
